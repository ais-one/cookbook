type Query {
  hello(message: String): String
  getAuthor(id: Int!): Author
  getAuthors(page: Int, limit: Int, search: String): [Author!]!

  getCategory(id: Int!): Category
  getCategories: Categories

  uploads: [File] # file upload
}

type Mutation {
  putAuthor(id: Int!, body: InputAuthor!): Author
  postAuthor(body: InputAuthor!): Author
  patchCategory(id: Int!, body: InputCategory!): Category
  postCategory(body: InputCategory!): Category

  singleUpload(file: Upload!): File! # file upload
}

 
type File { # File Upload - Upload scalar type is from Apollo - better to use rest for this?
  filename: String!
  mimetype: String!
  encoding: String!
}

input InputAuthor {
  name: String!
  avatar: String!
}
type Author {
  id: ID!
  name: String!
  avatar: String!
}

input InputCategory {
  name: String!
}
type Category {
  id: ID!
  name: String!
}
type Book {
  id: ID!
  name: String!
  category: Category!
  authora: [Author]!
}
type Page {
  id: ID!
  content: String!
  bookId: Book!
}

type Categories {
  results: [Category]!
  total: Int!
}
type Authors {
  results: [Author]!
  total: Int!
}
type Books {
  results: [Book]!
  total: Int!
}
type Pages {
  results: [Page]!
  total: Int!
}

type Subscription {
  categoryAdded: Category
  categoryUpdated: Category
}
