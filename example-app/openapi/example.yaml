openapi: 3.0.0
info:
  version: 1.0.0
  title: Cookbook API
  description: A sample API to demonstrate features in the OpenAPI specification
  termsOfService: http://es-labs.org/terms/
  contact:
    name: ES-Labs API Team
    email: eslabs.com@gmail.com
    url: https://es-labs.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://127.0.0.1:3000/api
    description: local development server
  - url: '{protocol}://{environment}.example.com/v2'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      environment:
        default: api    # Production server
        enum:
          - api         # Production server
          - api.dev     # Development server
          - api.staging # Staging server
components:
  securitySchemes:
    BasicAuth:
      $ref: 'http://127.0.0.1:8080/openapi/securitySchema.yaml#/MySecurity/BasicAuth'
    ApiKeyAuth:
      $ref: 'http://127.0.0.1:8080/openapi/securitySchema.yaml#/MySecurity/ApiKeyAuth'
    # Pet:
    #   allOf:
    #     - $ref: '#/components/schemas/NewPet'
    #     - type: object
    #       required:
    #       - id
    #       properties:
    #         id:
    #           type: integer
    #           format: int64
    # NewPet:
    #   type: object
    #   required:
    #     - name  
    #   properties:
    #     name:
    #       type: string
    #     tag:
    #       type: string    
  schemas:
    Error:
      $ref: 'http://127.0.0.1:8080/openapi/objects.yaml#/components/schemas/Error'

security:
  - BasicAuth: []
  - ApiKeyAuth: []

paths:
  /healthcheck:
    $ref: 'http://127.0.0.1:8080/openapi/base.yaml#healthcheck'
  /health-auth:
    $ref: 'http://127.0.0.1:8080/openapi/base.yaml#health-auth'
  /auth/login:
    $ref: 'http://127.0.0.1:8080/openapi/auth.yaml#login'
  /auth/otp:
    $ref: 'http://127.0.0.1:8080/openapi/auth.yaml#otp'
  /categories:
    get:
      summary: Get categories
      description:
        Returns all categories from the system that the user has access to
      operationId: findCategories
      security:
        - ApiKeyAuth: [] 
      parameters:
        - name: page
          in: query
          description: 1-based page index
          required: false
          style: form
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: page size
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: category response
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: int
                  results:
                    type: array
                    items:
                      $ref: 'http://127.0.0.1:8080/openapi/objects.yaml#/components/schemas/Category'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      description: Creates a new pet in the store. Duplicates are allowed
      operationId: addPet
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: 'http://127.0.0.1:8080/openapi/objects.yaml#/components/schemas/NewPet'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: 'http://127.0.0.1:8080/openapi/objects.yaml#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: find pet by id
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: 'http://127.0.0.1:8080/openapi/objects.yaml#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: pet deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
